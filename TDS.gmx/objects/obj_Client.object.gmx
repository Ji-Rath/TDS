<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>nextByteIsHeader = true;
expectedBytes = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_Client</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Here we process messages from the server.
 * See the game constants for the message type definitions.
 * 
 * The protocol is relatively simple: Every message is preceded by a "header" 
 * consisting of one byte for the message body length. This is followed by
 * another byte for the message type. The rest of the message depends on the message type.
 */
 
if(socket_has_error(serverSocket)) {
    show_message("The connection to the server was lost:" + socket_error(serverSocket));
    game_end();
}

while(tcp_receive(serverSocket, expectedBytes)) {
    if(nextByteIsHeader) {
        expectedBytes = read_ubyte(serverSocket);
        nextByteIsHeader = false;
    } else {
        var messageType;
        messageType = read_ubyte(serverSocket);
        switch(messageType) {
        case MSG_MOVEMENT:
            obj_player.x = read_ushort(serverSocket);
            obj_player.y = read_ushort(serverSocket);
            obj_player.image_angle = read_ushort(serverSocket);
            obj_player.image_index = read_ushort(serverSocket);
            break;
            
        default:
            // Just ignore unknown messages
        }
        
        nextByteIsHeader = true;
        expectedBytes = 1;
    }
}

// Now we send our mouse position to the server, so that it can set our paddle position
write_short(serverSocket, obj_player_2.x);
write_short(serverSocket, obj_player_2.y);
write_short(serverSocket, obj_player_2.image_angle);
write_short(serverSocket, obj_player_2.image_index);
socket_send(serverSocket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
